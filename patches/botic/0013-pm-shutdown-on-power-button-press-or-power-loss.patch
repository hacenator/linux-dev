From e9ade1015baa423a0124b424fe71c4e57236a9ec Mon Sep 17 00:00:00 2001
From: Miroslav Rudisin <miero@seznam.cz>
Date: Sun, 6 Mar 2016 10:36:15 +0100
Subject: [PATCH] pm: shutdown on power button press or power loss

---
 drivers/mfd/tps65217.c | 72 +++++++++++++++++++++++++++++++++++++++++---------
 drivers/rtc/rtc-omap.c | 26 +++++++++++++++---
 include/linux/pm.h     |  1 +
 3 files changed, 83 insertions(+), 16 deletions(-)

diff --git a/drivers/mfd/tps65217.c b/drivers/mfd/tps65217.c
index ca19130..d24a42b 100644
--- a/drivers/mfd/tps65217.c
+++ b/drivers/mfd/tps65217.c
@@ -34,6 +34,11 @@
 #include <linux/mfd/core.h>
 #include <linux/mfd/tps65217.h>
 
+#include <linux/reboot.h>
+
+static int power_off_on_battery = 1;
+static int power_off_timeout = 30;
+
 static const struct mfd_cell tps65217s[] = {
 	{
 		.name = "tps65217-pmic",
@@ -166,17 +171,33 @@ static const struct of_device_id tps65217_of_match[] = {
 };
 MODULE_DEVICE_TABLE(of, tps65217_of_match);
 
+void (*pm_schedule_power_off)(unsigned long delay);
+EXPORT_SYMBOL(pm_schedule_power_off);
+
 static irqreturn_t tps65217_irq(int irq, void *irq_data)
 {
 	struct tps65217 *tps = irq_data;
 	unsigned int int_reg = 0, status_reg = 0;
+	static int power_off_scheduled = 0;
+	int schedule_power_off = 0;
+	int on_battery;
+	int ret;
 
-	tps65217_reg_read(tps, TPS65217_REG_INT, &int_reg);
-	tps65217_reg_read(tps, TPS65217_REG_STATUS, &status_reg);
+	ret = tps65217_reg_read(tps, TPS65217_REG_INT, &int_reg);
+	if (ret < 0) {
+		dev_dbg(tps->dev, "Failed to read INT reg\n");
+		return IRQ_NONE;
+	}
+	ret = tps65217_reg_read(tps, TPS65217_REG_STATUS, &status_reg);
+	if (ret < 0) {
+		dev_dbg(tps->dev, "Failed to read STATUS reg\n");
+		return IRQ_NONE;
+	}
 	if (status_reg)
 		dev_dbg(tps->dev, "status now: 0x%X\n", status_reg);
 
-	if (!int_reg)
+	if ((int_reg & (TPS65217_INT_PBI | TPS65217_INT_ACI | TPS65217_INT_USBI))
+			== 0)
 		return IRQ_NONE;
 
 	if (int_reg & TPS65217_INT_PBI) {
@@ -185,18 +206,37 @@ static irqreturn_t tps65217_irq(int irq, void *irq_data)
 		input_report_key(tps->pwr_but, KEY_POWER,
 				status_reg & TPS65217_STATUS_PB);
 		input_sync(tps->pwr_but);
+		if (status_reg & TPS65217_STATUS_PB)
+			schedule_power_off = 1;
 	}
-	if (int_reg & TPS65217_INT_ACI) {
-		/* Handle AC power status change */
-		dev_dbg(tps->dev, "AC power status change\n");
-		/* Press KEY_POWER when AC not present */
-		input_report_key(tps->pwr_but, KEY_POWER,
-				~status_reg & TPS65217_STATUS_ACPWR);
-		input_sync(tps->pwr_but);
+	on_battery = !(status_reg & (TPS65217_STATUS_ACPWR |
+								 TPS65217_STATUS_USBPWR));
+	if (int_reg & (TPS65217_INT_ACI | TPS65217_INT_USBI)) {
+		/* Handle external power status change */
+		dev_dbg(tps->dev, "external power status change\n");
+		if (on_battery && power_off_on_battery) {
+			input_report_key(tps->pwr_but, KEY_POWER, 1);
+			input_report_key(tps->pwr_but, KEY_POWER, 0);
+			input_sync(tps->pwr_but);
+			schedule_power_off = 1;
+		}
 	}
-	if (int_reg & TPS65217_INT_USBI) {
-		/* Handle USB power status change */
-		dev_dbg(tps->dev, "USB power status change\n");
+
+	if (schedule_power_off && !power_off_scheduled) {
+		power_off_scheduled = 1;
+		if (power_off_timeout > 1) {
+			/* schedule power off */
+			if (pm_schedule_power_off)
+				pm_schedule_power_off(power_off_timeout);
+		} else if (power_off_timeout == 1) {
+#ifndef MODULE
+			/* immediate power off */
+			machine_power_off();
+#else
+			/* clean system power_off */
+			kernel_power_off();
+#endif
+		}
 	}
 
 	return IRQ_HANDLED;
@@ -390,6 +430,12 @@ static void __exit tps65217_exit(void)
 }
 module_exit(tps65217_exit);
 
+module_param(power_off_on_battery, int, 0644);
+MODULE_PARM_DESC(power_off_on_battery, "immediate shutdown on AC power loss");
+
+module_param(power_off_timeout, int, 0644);
+MODULE_PARM_DESC(power_off_timeout, "max. time for shutdown (in seconds)");
+
 MODULE_AUTHOR("AnilKumar Ch <anilkumar@ti.com>");
 MODULE_DESCRIPTION("TPS65217 chip family multi-function driver");
 MODULE_LICENSE("GPL v2");
diff --git a/drivers/rtc/rtc-omap.c b/drivers/rtc/rtc-omap.c
index ec2e9c5..16f9d54 100644
--- a/drivers/rtc/rtc-omap.c
+++ b/drivers/rtc/rtc-omap.c
@@ -406,7 +406,7 @@ static int omap_rtc_set_alarm(struct device *dev, struct rtc_wkalrm *alm)
 static struct omap_rtc *omap_rtc_power_off_rtc;
 
 /*
- * omap_rtc_poweroff: RTC-controlled power off
+ * omap_rtc_schedule_poweroff: delayed RTC-controlled power off
  *
  * The RTC can be used to control an external PMIC via the pmic_power_en pin,
  * which can be configured to transition to OFF on ALARM2 events.
@@ -419,7 +419,7 @@ static struct omap_rtc *omap_rtc_power_off_rtc;
  *
  * Called with local interrupts disabled.
  */
-static void omap_rtc_power_off(void)
+static void omap_rtc_schedule_power_off(unsigned long delay)
 {
 	struct omap_rtc *rtc = omap_rtc_power_off_rtc;
 	struct rtc_time tm;
@@ -435,7 +435,8 @@ static void omap_rtc_power_off(void)
 	omap_rtc_read_time_raw(rtc, &tm);
 	bcd2tm(&tm);
 	rtc_tm_to_time(&tm, &now);
-	rtc_time_to_tm(now + 2, &tm);
+	/* Add shutdown time to the current value */
+	rtc_time_to_tm(now + delay + 2, &tm);
 
 	if (tm2bcd(&tm) < 0) {
 		dev_err(&rtc->rtc->dev, "power off failed\n");
@@ -469,6 +470,19 @@ static void omap_rtc_power_off(void)
 	mdelay(2500);
 }
 
+/*
+ * omap_rtc_poweroff: RTC-controlled power off
+ *
+ * The RTC can be used to control an external PMIC via the pmic_power_en pin,
+ * which can be configured to transition to OFF on ALARM2 events.
+ *
+ * Called with local interrupts disabled.
+ */
+static void omap_rtc_power_off(void)
+{
+	omap_rtc_schedule_power_off(0);
+}
+
 static struct rtc_class_ops omap_rtc_ops = {
 	.read_time	= omap_rtc_read_time,
 	.set_time	= omap_rtc_set_time,
@@ -533,6 +547,7 @@ static int omap_rtc_probe(struct platform_device *pdev)
 	const struct platform_device_id *id_entry;
 	const struct of_device_id *of_id;
 	int ret;
+	u32 val;
 
 	rtc = devm_kzalloc(&pdev->dev, sizeof(*rtc), GFP_KERNEL);
 	if (!rtc)
@@ -579,6 +594,10 @@ static int omap_rtc_probe(struct platform_device *pdev)
 
 	rtc->type->unlock(rtc);
 
+	/* Disable PMIC power enable */
+	val = rtc_readl(rtc, OMAP_RTC_PMIC_REG);
+	rtc_writel(rtc, val & ~OMAP_RTC_PMIC_POWER_EN_EN, OMAP_RTC_PMIC_REG);
+
 	/*
 	 * disable interrupts
 	 *
@@ -679,6 +698,7 @@ static int omap_rtc_probe(struct platform_device *pdev)
 			omap_rtc_power_off_rtc = rtc;
 			pm_power_off = omap_rtc_power_off;
 		}
+		pm_schedule_power_off = omap_rtc_schedule_power_off;
 	}
 
 	return 0;
diff --git a/include/linux/pm.h b/include/linux/pm.h
index 6a5d654..43c840f 100644
--- a/include/linux/pm.h
+++ b/include/linux/pm.h
@@ -33,6 +33,7 @@
  */
 extern void (*pm_power_off)(void);
 extern void (*pm_power_off_prepare)(void);
+extern void (*pm_schedule_power_off)(unsigned long delay);
 
 struct device; /* we have a circular dep with device.h */
 #ifdef CONFIG_VT_CONSOLE_SLEEP
-- 
2.1.4

