From 2445e4c5887244ad552e750c1b319f939c3680df Mon Sep 17 00:00:00 2001
From: Miroslav Rudisin <miero@seznam.cz>
Date: Thu, 1 Dec 2016 01:44:34 +0100
Subject: [PATCH] ASoC: mcasp: add suport for emulated mute pin on data pins

---
 sound/soc/davinci/davinci-mcasp.c | 42 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 41 insertions(+), 1 deletion(-)

diff --git a/sound/soc/davinci/davinci-mcasp.c b/sound/soc/davinci/davinci-mcasp.c
index 51b3f07..0fbc8bd 100644
--- a/sound/soc/davinci/davinci-mcasp.c
+++ b/sound/soc/davinci/davinci-mcasp.c
@@ -113,6 +113,8 @@ struct davinci_mcasp {
 	struct snd_pcm_hw_constraint_list chconstr[2];
 };
 
+static int mute_pin = -1;
+
 static inline void mcasp_set_bits(struct davinci_mcasp *mcasp, u32 offset,
 				  u32 val)
 {
@@ -808,7 +810,7 @@ static int mcasp_common_hw_param(struct davinci_mcasp *mcasp, int stream,
 	} else {
 		disable_pins = 0;
 	}
-	mcasp_set_reg(mcasp, DAVINCI_MCASP_PFUNC_REG, disable_pins);
+	mcasp_mod_bits(mcasp, DAVINCI_MCASP_PFUNC_REG, disable_pins, AFSX | ACLKX);
 	mcasp_clr_bits(mcasp, DAVINCI_MCASP_PDOUT_REG, disable_pins);
 	mcasp_set_bits(mcasp, DAVINCI_MCASP_PDIR_REG, disable_pins);
 
@@ -825,15 +827,25 @@ static int mcasp_common_hw_param(struct davinci_mcasp *mcasp, int stream,
 			       mcasp->serial_dir[i]);
 		if (mcasp->serial_dir[i] == TX_MODE &&
 					tx_ser < max_active_serializers) {
+			mcasp_clr_bits(mcasp, DAVINCI_MCASP_PFUNC_REG, AXR(i));
 			mcasp_set_bits(mcasp, DAVINCI_MCASP_PDIR_REG, AXR(i));
 			mcasp_mod_bits(mcasp, DAVINCI_MCASP_XRSRCTL_REG(i),
 				       DISMOD_LOW, DISMOD_MASK);
 			tx_ser++;
 		} else if (mcasp->serial_dir[i] == RX_MODE &&
 					rx_ser < max_active_serializers) {
+			mcasp_clr_bits(mcasp, DAVINCI_MCASP_PFUNC_REG, AXR(i));
 			mcasp_clr_bits(mcasp, DAVINCI_MCASP_PDIR_REG, AXR(i));
 			rx_ser++;
 		} else {
+			mcasp_set_bits(mcasp, DAVINCI_MCASP_PDIR_REG, AXR(i));
+			if (mute_pin == i ||
+					(mute_pin == 4 && (i == 2 || i == 3))) {
+				mcasp_set_bits(mcasp, DAVINCI_MCASP_PDOUT_REG, AXR(i));
+			} else {
+				mcasp_clr_bits(mcasp, DAVINCI_MCASP_PDOUT_REG, AXR(i));
+			}
+			mcasp_set_bits(mcasp, DAVINCI_MCASP_PFUNC_REG, AXR(i));
 			mcasp_mod_bits(mcasp, DAVINCI_MCASP_XRSRCTL_REG(i),
 				       SRMOD_INACTIVE, SRMOD_MASK);
 		}
@@ -1496,6 +1508,30 @@ static void davinci_mcasp_shutdown(struct snd_pcm_substream *substream,
 		mcasp->channels = 0;
 }
 
+static int davinci_mcasp_mute_stream(struct snd_soc_dai *cpu_dai,
+				   int mute, int stream)
+{
+	struct davinci_mcasp *mcasp = snd_soc_dai_get_drvdata(cpu_dai);
+
+	if (mute_pin >= 0 || mute_pin <= 3) {
+		if (mute) {
+			mcasp_set_bits(mcasp, DAVINCI_MCASP_PDOUT_REG, AXR(mute_pin));
+		} else {
+			mcasp_clr_bits(mcasp, DAVINCI_MCASP_PDOUT_REG, AXR(mute_pin));
+		}
+	} else if (mute_pin == 4) {
+		if (mute) {
+			mcasp_set_bits(mcasp, DAVINCI_MCASP_PDOUT_REG, AXR(2));
+			mcasp_set_bits(mcasp, DAVINCI_MCASP_PDOUT_REG, AXR(3));
+		} else {
+			mcasp_clr_bits(mcasp, DAVINCI_MCASP_PDOUT_REG, AXR(2));
+			mcasp_clr_bits(mcasp, DAVINCI_MCASP_PDOUT_REG, AXR(3));
+		}
+	}
+
+	return 0;
+}
+
 static const struct snd_soc_dai_ops davinci_mcasp_dai_ops = {
 	.startup	= davinci_mcasp_startup,
 	.shutdown	= davinci_mcasp_shutdown,
@@ -1506,6 +1542,7 @@ static const struct snd_soc_dai_ops davinci_mcasp_dai_ops = {
 	.set_sysclk	= davinci_mcasp_set_sysclk,
 	.set_tdm_slot	= davinci_mcasp_set_tdm_slot,
 	.set_channel_map	= davinci_mcasp_set_channel_map,
+	.mute_stream = davinci_mcasp_mute_stream,
 };
 
 static int davinci_mcasp_dai_probe(struct snd_soc_dai *dai)
@@ -2222,6 +2259,9 @@ static struct platform_driver davinci_mcasp_driver = {
 
 module_platform_driver(davinci_mcasp_driver);
 
+module_param(mute_pin, int, 0644);
+MODULE_PARM_DESC(mute_pin, "use some of McASP pins as mute pin: 0:0, 1:1, 2:2, 3:3, 4:2+3");
+
 MODULE_AUTHOR("Steve Chen");
 MODULE_DESCRIPTION("TI DAVINCI McASP SoC Interface");
 MODULE_LICENSE("GPL");
-- 
2.1.4

